{"version":3,"sources":["dictionary lazy /^/.//.*/.json$/ groupOptions: {} namespace object","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","App","state","searchTerm","result","handleChange","event","setState","target","value","handleSearch","preventDefault","toLowerCase","Dictionary","console","log","default","catch","err","className","onSubmit","this","type","placeholder","onChange","onClick","handlesearch","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gLAAA,IAAIA,EAAM,CACT,WAAY,CACX,GACA,GAED,WAAY,CACX,GACA,GAED,WAAY,CACX,GACA,GAED,WAAY,CACX,GACA,GAED,WAAY,CACX,GACA,GAED,WAAY,CACX,GACA,GAED,WAAY,CACX,GACA,GAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,IAED,WAAY,CACX,GACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBU,EAAED,EAAI,MAGnCX,EAAoBa,KAAO,WAC1B,OAAOC,OAAOD,KAAKd,IAEpBC,EAAoBW,GAAK,GACzBI,EAAOC,QAAUhB,G,mHC7DFiB,G,iNAzDbC,MAAQ,CACNC,WAAY,GACZC,OAAQ,I,EAMVC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEJ,WAAYG,EAAME,OAAOC,S,EAI3CC,aAAe,SAACJ,GAChBA,EAAMK,iBACN,IAAIR,EAAa,EAAKD,MAAMC,WAG5B,MAAO,YAAgBA,EAAW,GAAGS,cAArC,UACKtB,MAAK,SAAEuB,GAENC,QAAQC,IAAIF,EAAWG,QAAQb,IAC/B,EAAKI,SAAS,CAAEH,OAAQS,EAAWG,QAAQb,QAE5Cc,OAAM,SAAAC,GAELJ,QAAQC,IAAR,QAAqBG,O,qHAIjB,IAAD,OACP,OACE,yBAAKC,UAAU,OAAf,cAGE,0BAAMC,SAAUC,KAAKX,cACnB,2BACEY,KAAK,OACLC,YAAY,cACZC,SAAU,SAAAlB,GAAQ,EAAKD,aAAaC,IACpCG,MAAOY,KAAKnB,MAAMC,aAEpB,4BAAQmB,KAAK,SAASG,QAASJ,KAAKK,cAApC,WAIF,oCAE2B,KAAtBL,KAAKnB,MAAME,QACZiB,KAAKnB,MAAME,a,GAlDLuB,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.9fc19bc0.chunk.js","sourcesContent":["var map = {\n\t\"./a.json\": [\n\t\t17,\n\t\t3\n\t],\n\t\"./b.json\": [\n\t\t18,\n\t\t4\n\t],\n\t\"./c.json\": [\n\t\t19,\n\t\t5\n\t],\n\t\"./d.json\": [\n\t\t20,\n\t\t6\n\t],\n\t\"./e.json\": [\n\t\t21,\n\t\t7\n\t],\n\t\"./f.json\": [\n\t\t22,\n\t\t8\n\t],\n\t\"./g.json\": [\n\t\t23,\n\t\t9\n\t],\n\t\"./h.json\": [\n\t\t24,\n\t\t10\n\t],\n\t\"./i.json\": [\n\t\t25,\n\t\t11\n\t],\n\t\"./j.json\": [\n\t\t26,\n\t\t12\n\t],\n\t\"./k.json\": [\n\t\t27,\n\t\t13\n\t],\n\t\"./l.json\": [\n\t\t28,\n\t\t14\n\t],\n\t\"./m.json\": [\n\t\t29,\n\t\t15\n\t],\n\t\"./n.json\": [\n\t\t30,\n\t\t16\n\t],\n\t\"./o.json\": [\n\t\t31,\n\t\t17\n\t],\n\t\"./p.json\": [\n\t\t32,\n\t\t18\n\t],\n\t\"./q.json\": [\n\t\t33,\n\t\t19\n\t],\n\t\"./r.json\": [\n\t\t34,\n\t\t20\n\t],\n\t\"./s.json\": [\n\t\t35,\n\t\t21\n\t],\n\t\"./t.json\": [\n\t\t36,\n\t\t22\n\t],\n\t\"./u.json\": [\n\t\t37,\n\t\t23\n\t],\n\t\"./v.json\": [\n\t\t38,\n\t\t24\n\t],\n\t\"./w.json\": [\n\t\t39,\n\t\t25\n\t],\n\t\"./x.json\": [\n\t\t40,\n\t\t26\n\t],\n\t\"./y.json\": [\n\t\t41,\n\t\t27\n\t],\n\t\"./z.json\": [\n\t\t42,\n\t\t28\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 15;\nmodule.exports = webpackAsyncContext;","import React from 'react';\nimport './App.css';\n\n//import Dictionary from './dictionary.json';\n\nclass App extends React.Component {\n  state = {\n    searchTerm: '',\n    result: '',\n  }\n  componentDidMount() {\n    //console.log(Dictionary['DIPLOBLASTIC']);\n  }\n\n  handleChange = (event) => {\n    this.setState({ searchTerm: event.target.value });\n\n  }\n\n  handleSearch = (event) => {\n  event.preventDefault();\n  let searchTerm = this.state.searchTerm;\n  //const Dictionary =  import(`./dictionary/${searchTerm[0].toLowerCase()}.json`);\n\n  import(`./dictionary/${searchTerm[0].toLowerCase()}.json`)\n      .then(( Dictionary ) => {\n        // Use dictionary\n        console.log(Dictionary.default[searchTerm]);\n        this.setState({ result: Dictionary.default[searchTerm] });\n      })\n      .catch(err => {\n        // Handle failure\n        console.log(`error`, err);\n      });\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        Darktionary\n\n        <form onSubmit={this.handleSearch}>\n          <input\n            type=\"text\"\n            placeholder=\"Search here\"\n            onChange={event=>{this.handleChange(event)}}\n            value={this.state.searchTerm}\n          ></input>\n          <button type=\"submit\" onClick={this.handlesearch}>\n            Search\n          </button>\n        </form>\n        <>\n          {\n            (this.state.result !== '') &&\n            this.state.result\n          }\n        </>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}